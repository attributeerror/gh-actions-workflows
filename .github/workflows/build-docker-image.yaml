name: Build & Push Docker Image

on:
  workflow_call:
    inputs:
      package-name:
        type: string
        required: false
        description: 'The name for the Docker image that gets pushed.'
      docker-build-args:
        type: string
        required: false
        description: 'Build arguments to pass to Buildx action.'
    outputs:
      version:
        description: 'The version determined via Semantic Release'
        value: ${{ jobs.determine-release-version.outputs.version }}
      new-release-published:
        description: 'Whether Semantic Release determines a new version should be published.'
        value: ${{ jobs.determine-release-version.outputs.new-release-published }}

jobs:
  determine-release-version:
    if: |
      github.triggering_actor != 'dependabot[bot]'         &&
      (startsWith(github.event.head_commit.message, 'feat')  ||
        startsWith(github.event.head_commit.message, 'fix')  ||
        startsWith(github.event.head_commit.message, 'chore') ||
        startsWith(github.event.head_commit.message, 'build') ||
        startsWith(github.event.head_commit.message, 'ci') ||
        startsWith(github.event.head_commit.message, 'perf') ||
        startsWith(github.event.head_commit.message, 'refactor') ||
        startsWith(github.event.head_commit.message, 'revert') ||
        startsWith(github.event.head_commit.message, 'style') ||
        startsWith(github.event.head_commit.message, 'test') ||
        startsWith(github.event.head_commit.message, 'Merge')
      ) && !contains(github.event.head_commit.message, '[skip ci]')
    uses: attributeerror/gh-actions-workflows/.github/workflows/determine-next-version.yaml@main

  build:
    needs: determine-release-version
    if: ${{ needs.determine-release-version.outputs.new-release-published == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4.2.2
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # docker/setup-qemu-action@v3.6.0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # docker/setup-buildx-action@v3.10.0

      - name: Login to GHCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Get repository name
        if: inputs.package-name == '' && needs.determine-release-version.outputs.new-release-published == 'true'
        env:
          REPOSITORY: ${{ github.repository }}
        id: repo-name
        run: echo "repository_name=${REPOSITORY##*/}" >> $GITHUB_OUTPUT

      - name: Build & push the Docker image
        if: needs.determine-release-version.outputs.new-release-published == 'true'
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # docker/build-push-action@v6.15.0
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ inputs.package-name || steps.repo-name.outputs.repository_name }}:v${{ needs.determine-release-version.outputs.version }}
          build-args: ${{ inputs.docker-build-args }}

      - name: Create Release
        if: success() && github.event_name == 'push' && github.ref_name == 'main' && needs.determine-release-version.outputs.new-release-published == 'true'
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ needs.determine-release-version.outputs.git-tag }}
          body: ${{ needs.determine-release-version.outputs.release-notes }}
          draft: false
          prerelease: false
          make_latest: true

      - name: Delete tag if build unsuccessful
        if: failure()
        shell: bash
        run: git push origin refs/tags/${{ needs.determine-release-version.outputs.git-tag }} --delete
