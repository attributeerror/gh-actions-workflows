name: Build & Push Docker Image

on:
  workflow_call:
    inputs:
      package-name:
        type: string
        required: true
        description: 'The name for the Docker image that gets pushed.'
      docker-build-args:
        type: string
        required: false
        description: 'A JSON array of build arguments to pass to Docker.'
    outputs:
      version:
        description: 'The version determined via Semantic Release'
        value: ${{ jobs.build.outputs.version }}
      new-release-published:
        description: 'Whether Semantic Release determines a new version should be published.'
        value: ${{ jobs.build.outputs.new-release-published }}

jobs:
  build:
    if: |
      github.triggering_actor != 'dependabot[bot]'         &&
      (startsWith(github.event.head_commit.message, 'feat')  ||
        startsWith(github.event.head_commit.message, 'fix')  ||
        startsWith(github.event.head_commit.message, 'chore') ||
        startsWith(github.event.head_commit.message, 'build') ||
        startsWith(github.event.head_commit.message, 'ci') ||
        startsWith(github.event.head_commit.message, 'perf') ||
        startsWith(github.event.head_commit.message, 'refactor') ||
        startsWith(github.event.head_commit.message, 'revert') ||
        startsWith(github.event.head_commit.message, 'style') ||
        startsWith(github.event.head_commit.message, 'test') ||
        startsWith(github.event.head_commit.message, 'Merge')
      ) && !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
        version: v${{ steps.semantic.outputs.release-version }}
        new-release-published: ${{ steps.semantic.outputs.new-release-published }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Run Semantic Release
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:cfb2b8231400c4bcb0abb8403c38aaff0c865e1bae8892b9b40893db9ef49403
        id: semantic
        with:
          branches: |
            [
              'main',
              {
                name: 'alpha',
                prerelease: true
              },
              {
                name: 'beta',
                prerelease: true
              }
            ]
          tag_format: 'v${version}'
          plugins: |
              [
                [
                  "@semantic-release/commit-analyzer",
                  {
                    "releaseRules": [
                      { "breaking": true, "release": "major" },
                      { "revert": true, "release": "patch" },
                      { "type": "feat", "release": "minor" },
                      { "type": "fix", "release": "patch" },
                      { "type": "chore", "release": "patch" },
                      { "type": "perf", "release": "patch" },
                      { "type": "refactor", "release": "patch" },
                      { "type": "revert", "release": "patch" },
                      { "type": "test", "release": "patch" },
                      { "type": "npm", "release": "patch" },
                      { "scope": "no-release", "release": false }
                    ],
                    "parserOpts": {
                      "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES"]
                    }
                  }
                ]
              ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Map Docker build arguments
        if: ${{ inputs.docker-build-args != '' }}
        id: map-docker-build-args
        run: |
          echo "DOCKER_BUILD_ARGS=$(echo ${{ inputs.docker-build-args }} | jq '("--build-arg " + .[])' | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Build & push the Docker image
        if: steps.semantic.outputs.new-release-published == 'true'
        run: |
          docker build --file Dockerfile --tag ghcr.io/attributeerror/${{ inputs.package-name }}:$TAG ${{ steps.map-docker-build-args.outputs.DOCKER_BUILD_ARGS }} .
          docker push ghcr.io/attributeerror/${{ inputs.package-name }}:$TAG
        env:
          TAG: v${{ steps.semantic.outputs.release-version }}

      - name: Delete tag if build unsuccessful
        if: failure()
        shell: bash
        run: git push origin refs/tags/v${{ steps.semantic.outputs.release-version }} --delete
