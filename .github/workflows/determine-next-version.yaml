name: Determine next version

on:
  workflow_call:
    outputs:
      version: 
        description: 'The version determined via Semantic Release'
        value: ${{ jobs.determine-release-version.outputs.version }}
      git-tag:
        description: 'The Git tag to be published, if applicable.'
        value: v${{ jobs.determine-release-version.outputs.version }}
      release-notes:
        description: 'The release notes generated by Semantic Release, if applicable.'
        value: ${{ jobs.determine-release-version.outputs.release-notes }}
      new-release-published:
        description: 'Whether Semantic Release has determined that a new release should be published.'
        value: ${{ jobs.determine-release-version.outputs.new-release-published || 'false' }}

jobs:
  determine-release-version:
    if: |
      github.triggering_actor != 'dependabot[bot]'         &&
      (startsWith(github.event.head_commit.message, 'feat')  ||
        startsWith(github.event.head_commit.message, 'fix')  ||
        startsWith(github.event.head_commit.message, 'chore') ||
        startsWith(github.event.head_commit.message, 'build') ||
        startsWith(github.event.head_commit.message, 'ci') ||
        startsWith(github.event.head_commit.message, 'perf') ||
        startsWith(github.event.head_commit.message, 'refactor') ||
        startsWith(github.event.head_commit.message, 'revert') ||
        startsWith(github.event.head_commit.message, 'style') ||
        startsWith(github.event.head_commit.message, 'test') ||
        startsWith(github.event.head_commit.message, 'Merge')
      ) && !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
      version: ${{ steps.semantic.outputs.release-version }}
      release-notes: ${{ steps.semantic.outputs.release-notes }}
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # actions/checkout@v4.2.2

      - name: Run Semantic Release
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:71048986f7e28f024cbad0ef106a7ef20b9b0d322f3a8aa51d89f1c424e75061 # codfish/semantic-release-action@v3.3.0
        id: semantic
        with:
          branches: |
            [
              'main',
              {
                name: 'alpha',
                prerelease: true
              },
              {
                name: 'beta',
                prerelease: true
              }
            ]
          tag_format: 'v${version}'
          plugins: |-
            [
              [
                '@semantic-release/commit-analyzer',
                {
                  'releaseRules': [
                    { 'breaking': true, 'release': 'major' },
                    { 'revert': true, 'release': 'patch' },
                    { 'type': 'feat', 'release': 'minor' },
                    { 'type': 'fix', 'release': 'patch' },
                    { 'type': 'chore', 'release': 'patch' },
                    { 'type': 'perf', 'release': 'patch' },
                    { 'type': 'refactor', 'release': 'patch' },
                    { 'type': 'revert', 'release': 'patch' },
                    { 'type': 'test', 'release': 'patch' },
                    { 'type': 'npm', 'release': 'patch' },
                    { 'type': 'go', 'release': 'patch' },
                    { 'type': 'build', 'scope': 'deps', 'release': 'patch' },
                    { 'type': 'build', 'scope': 'deps-dev', 'release': 'patch' },
                    { 'scope': 'no-release', 'release': false }
                  ],
                  'parserOpts': {
                    'noteKeywords': ['BREAKING CHANGE', 'BREAKING CHANGES']
                  }
                }
              ],
              [
                '@semantic-release/release-notes-generator',
                {
                  'presetConfig': {
                    'types': [
                      { 'type': 'feat', 'section': '‚ú® Features' },
                      { 'type': 'fix', 'section': 'üêõ Bug Fixes' },
                      { 'type': 'chore', 'section': 'üôÇ Chores' },
                      { 'type': 'perf', 'section': 'üöÑ Performance Improvements' },
                      { 'type': 'refactor', 'hidden': true },
                      { 'type': 'npm', 'section': 'ü§ñ Dependency Updates' },
                      { 'type': 'go', 'section': 'ü§ñ Dependency Updates' },
                      { 'type': 'build', 'section': 'ü§ñ Dependency Updates' }
                    ]
                  },
                  'parserOpts': {
                    'noteKeywords': ['BREAKING CHANGE', 'BREAKING CHANGES']
                  },
                  'writerOpts': {
                    'commitsSort': ['subject', 'scope']
                  }
                }
              ]
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release Variables
        env:
          VERSION: ${{ steps.semantic.outputs.release-version }}
          GIT_TAG: v${{ steps.semantic.outputs.release-version }}
          RELEASE_NOTES: ${{ steps.semantic.outputs.release-notes }}
          NEW_RELEASE_PUBLISHED: ${{ steps.semantic.outputs.new-release-published }}
        run: |
          echo -e "Is new release published?: $NEW_RELEASE_PUBLISHED\nVersion: $VERSION\nGit Tag: $GIT_TAG\nRelease notes: $RELEASE_NOTES"